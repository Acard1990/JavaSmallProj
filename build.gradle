plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'idea'
	id 'jacoco'
}

group = 'com.stormwind'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}
sourceSets {
	integrationtest {
		java {
			srcDirs = ["java/integrationTest"]
		}
	}
}
task integrationTest(type: Test, group: "verification") {
	testClassesDirs = sourceSets.integrationtest.output.classesDirs
	classpath = sourceSets.integrationtest.runtimeClasspath
	maxParallelForks = 1
	// The fail fast property should be uncommented when the gradle wrapper is updated and everything is moved to work with the bom.
	//failFast = true

	//    Require this task to execute after the unit tests
	mustRunAfter tasks.test
}

check.dependsOn integrationTest
configurations.all {
	resolutionStrategy {
		cacheDynamicVersionsFor 0, 'seconds'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'io.rest-assured:rest-assured:4.5.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.mockito:mockito-core:4.8.0"
	testImplementation('junit:junit:4.13.2')
	testImplementation "io.cucumber:cucumber-java:7.8.+"
	testImplementation "io.cucumber:cucumber-junit:7.8.+"
	testImplementation "io.cucumber:cucumber-spring:7.8.+"
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	integrationtestCompileOnly "org.projectlombok:lombok"
	integrationtestAnnotationProcessor "org.projectlombok:lombok"
	//    Provide at compile-time the classes produced by main and test
	integrationtestImplementation sourceSets.main.output
	integrationtestImplementation sourceSets.test.output

	//    Provide at compile-time the dependencies that main and test require
	integrationtestImplementation configurations.implementation
	integrationtestImplementation configurations.testImplementation

	//    Provide at run-time the dependencies that main and test require
//	integrationtestRuntime configurations.runtime
//	integrationtestRuntime configurations.testRuntime
}

tasks.named('test') {
	useJUnitPlatform()
}
configurations {
	cucumberRuntime {
		extendsFrom testImplementation
	}
}
task cucumberCli() {
	dependsOn assemble, testClasses
	doLast {
		javaexec {
			main = "io.cucumber.core.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = [
					'--plugin', 'pretty',
					'--plugin', 'html:target/cucumber-report.html',
					'--glue', 'src/integrationTests/java/resources/features/appUser.feature']
					//'src/integrationTests/java/resources/features/appUser.feature']
		}
	}
}
